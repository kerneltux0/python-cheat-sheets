for number in range(10):
	print('blabla')

## you can substitute any string for 'number' (no quotes)
## "in range(10)" means do the following 10 times starting w/0
## the value of 'number' increments w/each iteration of the loop

for number in range(1, 20):
	print('yaddayadda')

## in this example, it starts at 1 and ends @ 20 BUT DOESN'T INCLUDE 20

>>> count = 0
>>> for number in range(1, 4):
...     count = count + number
... 
>>> count = 0
>>> for number in range(1, 4):
...     count = count + number
...     print(count)
... 
1
3
6

## it printed 3 separate lines because the print function was inside the loop

>>> count = 0
>>> for number in range(1, 4):
...     count = count + number
... 
>>> print(count)
6

## this only printed the final answer because the print function ran after the loop completed

>>> def sum_list(my_list):
...     count = 0
...     for number in my_list:
...             count = count + number
... 
>>> def sum_list(my_list):
...     count = 0
...     for number in my_list:
...             count = count + number
...     return count
... 
>>> assert sum_list([1, 2, 3]) == 6
>>> assert sum_list([1, 2, 3]) == 8
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AssertionError
>>> 

## sum_list is now a defined function that contains a for loop
## assert tests the code
	## your code evaluates correctly if there's no output
	## your code evaluates incorrectly if you get an error


